如果是无向图，那么建边的时候，反向边的流量不是0，而是和正向边的流量相同。

最大权闭合子图：
有一个有向图，每一个点都有一个权值（可以为正或负或0），选择一个权值和最大的子图，使得每个点的后继都在子图里面，这个子图就叫最大权闭合子图。
最大闭权子图一个经典的网络流问题，如果一个点被选择了则后继必须被选择，那么称该图是 闭合的，因此该问题叫做最大权闭合子图问题。可以使用最小割解决。
具体的建图方法为：
源点向所有正权点连结一条容量为权值的边
保留原图中所有的边，容量为正无穷
所有负权点向汇点连结一条容量为权值绝对值的边
则原图的最大权闭合子图的点权和即为所有正权点权值之和减去建出的网络流图的最小割。
以下约定源点为 ss，汇点为 tt。
在最小割图上，如果割掉 ss 和 uu 之间的边，代表不选择 uu 进入子图，如果割掉 vv 和 tt 之间的边，代表选择 vv 进入子图。
小技巧：dicnic里的d数组不为0，就说明那个点要取
求完最小割后，如果点 ss 与 ii 相连，那么子图上会选择点 ii，如果 ii 与 tt 相连，则不选择点 ii。

二分图最大点权独立集 = 所有的点权 - 二分图最小点权覆盖集（最小割） 方格取数问题
最小点权覆盖集的建图方法：
1、增加源点 s，连接 s 到 x 集合中所有点，边权是相应点的点权
2、增加汇点 t，连接 y 集合中所有点到 t，边权是相应点的点权
3、对原图中的边，将边权变成无穷大

最小割割边唯一性判断：
在残余网络上（非满流的边）跑tarjan求出所有SCC，记id[u]为点u所在SCC的编号。显然有id[s]!=id[t]（否则s到t有通路，能继续增广）。
①对于任意一条满流边(u,v)，(u,v)能够出现在某个最小割集中，当且仅当id[u]!=id[v]；
②对于任意一条满流边(u,v)，(u,v)必定出现在最小割集中，当且仅当id[u]==id[s]且id[v]==id[t]。